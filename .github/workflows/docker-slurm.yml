name: ExascaleSandboxTests

on:
  push:
    branches: [ develop, main ]
  pull_request:
    branches: [ develop, main ]
  workflow_dispatch:

jobs:
  arm64:
    runs-on: LinuxARM64-4core-16G-150Gb
    timeout-minutes: 120
    permissions:
      packages: write
      contents: read
    steps:
      -
        name: Install Docker
        run: |
           # Uninstall incompatible packages
           for pkg in docker.io containerd runc; do sudo apt-get remove $pkg; done
           # Add Docker's official GPG key:
           sudo apt-get update
           sudo apt-get install ca-certificates curl
           sudo install -m 0755 -d /etc/apt/keyrings
           sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
           sudo chmod a+r /etc/apt/keyrings/docker.asc
           # Add the repository to Apt sources:
           echo \
             "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
             $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
             sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
           sudo apt-get update -y
           # Install docker packages
           sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
           # Allow runner use to run docker without sudo
           sudo usermod -aG docker $USER
           sudo apt-get install acl
           sudo setfacl --modify user:$USER:rw /var/run/docker.sock
      -
        name: Test Docker Installation
        run: docker run hello-world
      -
        name: Checkout repository
        uses: actions/checkout@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          logout: false
      -
        name: Prune pre-loaded GHA docker images
        run: |
          docker images
          docker image prune -a -f
          docker images
      -
        name: Create spack-stack Dockerfile and mirror
        run: |
          export S3_BUILD_CACHE_KEY=${{ secrets.SPACK_STACK_BUILDCACHE_KEY }}
          export S3_BUILD_CACHE_SECRET_KEY=${{ secrets.SPACK_STACK_BUILDCACHE_SECRET_KEY }}
          cd docker/spack-stack
          cat mirrors.in.yaml | envsubst > mirrors.yaml
          ./create_dockerfile.sh
      -
        name: Make lint
        run:  |
          pip install flake8
          flake8 src tests
      -
        name: Build spack-stack
        uses: docker/build-push-action@v4
        with:
          context: ./docker/spack-stack
          file: ./docker/spack-stack/Dockerfile
          secret-files: "mirrors=./docker/spack-stack/mirrors.yaml"
          secrets: |
            "spack_stack_buildcache_key=${{ secrets.SPACK_STACK_BUILDCACHE_KEY }}"
            "spack_stack_buildcache_secret_key=${{ secrets.SPACK_STACK_BUILDCACHE_SECRET_KEY }}"
          push: false
          tags: ghcr.io/noaa-gsl/exascaleworkflowsandbox/spack-stack-gnu-openmpi:latest
  amd64:
    runs-on: ubuntu-latest
    timeout-minutes: 720
    permissions:
      packages: write
      contents: read
    steps:
      -
        name: Checkout repository
        uses: actions/checkout@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          logout: false
      -
        name: Prune pre-loaded GHA docker images
        run: |
          docker images
          docker image prune -a -f
          docker images
      -
        name: Create spack-stack Dockerfile and mirror
        run: |
          export S3_BUILD_CACHE_KEY=${{ secrets.SPACK_STACK_BUILDCACHE_KEY }}
          export S3_BUILD_CACHE_SECRET_KEY=${{ secrets.SPACK_STACK_BUILDCACHE_SECRET_KEY }}
          cd docker/spack-stack
          cat mirrors.in.yaml | envsubst > mirrors.yaml
          ./create_dockerfile.sh
      -
        name: Make Lint
        run:  |
          pip install flake8
          flake8 src tests
      -
        name: Format Check
        run:  |
          pip install black
          black src tests --check --diff
      -
        name: Build spack-stack flux-cache
        uses: docker/build-push-action@v4
        with:
          context: ./docker/spack-stack
          file: ./docker/spack-stack/Dockerfile.flux-only
          secret-files: "mirrors=./docker/spack-stack/mirrors.yaml"
          secrets: |
            "spack_stack_buildcache_key=${{ secrets.SPACK_STACK_BUILDCACHE_KEY }}"
            "spack_stack_buildcache_secret_key=${{ secrets.SPACK_STACK_BUILDCACHE_SECRET_KEY }}"
          push: true
          tags: ghcr.io/noaa-gsl/exascaleworkflowsandbox/flux-cache:latest
          cache-from: type=registry,ref=ghcr.io/noaa-gsl/exascaleworkflowsandbox/flux-cache:cache
          cache-to: type=registry,ref=ghcr.io/noaa-gsl/exascaleworkflowsandbox/flux-cache:cache,mode=max
      -
        name: Build spack-stack
        uses: docker/build-push-action@v4
        with:
          context: ./docker/spack-stack
          file: ./docker/spack-stack/Dockerfile
          secret-files: "mirrors=./docker/spack-stack/mirrors.yaml"
          secrets: |
            "spack_stack_buildcache_key=${{ secrets.SPACK_STACK_BUILDCACHE_KEY }}"
            "spack_stack_buildcache_secret_key=${{ secrets.SPACK_STACK_BUILDCACHE_SECRET_KEY }}"
          push: true
          tags: ghcr.io/noaa-gsl/exascaleworkflowsandbox/spack-stack-gnu-openmpi:latest
          cache-from: type=registry,ref=ghcr.io/noaa-gsl/exascaleworkflowsandbox/spack-stack-gnu-openmpi:cache
          cache-to: type=registry,ref=ghcr.io/noaa-gsl/exascaleworkflowsandbox/spack-stack-gnu-openmpi:cache,mode=max
      -
        name: Build frontend
        uses: docker/build-push-action@v4
        with:
          context: ./docker
          file: ./docker/frontend/Dockerfile
          push: false
          load: true
          tags: ghcr.io/noaa-gsl/exascaleworkflowsandbox/frontend:latest
          cache-from: type=registry,ref=ghcr.io/noaa-gsl/exascaleworkflowsandbox/frontend:cache
          cache-to: type=registry,ref=ghcr.io/noaa-gsl/exascaleworkflowsandbox/frontend:cache,mode=max
      -
        name: Build master
        uses: docker/build-push-action@v4
        with:
          context: ./docker
          file: ./docker/master/Dockerfile
          push: false
          load: true
          tags: ghcr.io/noaa-gsl/exascaleworkflowsandbox/master:latest
          cache-from: type=registry,ref=ghcr.io/noaa-gsl/exascaleworkflowsandbox/master:cache
          cache-to: type=registry,ref=ghcr.io/noaa-gsl/exascaleworkflowsandbox/master:cache,mode=max
      -
        name: Build node
        uses: docker/build-push-action@v4
        with:
          context: ./docker
          file: ./docker/node/Dockerfile
          push: false
          load: true
          tags: ghcr.io/noaa-gsl/exascaleworkflowsandbox/node:latest
          cache-from: type=registry,ref=ghcr.io/noaa-gsl/exascaleworkflowsandbox/node:cache
          cache-to: type=registry,ref=ghcr.io/noaa-gsl/exascaleworkflowsandbox/node:cache,mode=max
      -
        name: Start Slurm cluster containers
        run: |
          cd docker
          export DOCKER_CLIENT_TIMEOUT=600
          export COMPOSE_HTTP_TIMEOUT=600
          docker compose version
          docker compose config
          docker images
          docker ps -a
          docker compose -f docker-compose.yml up -d --no-build
      -
        name: Copy test files to work directory
        run: |
          docker exec frontend bash -l -c "mkdir -p work; cd work ; cp -r ../chiltepin/* ."
      -
        name: Install chiltepin package
        run: docker exec frontend bash -l -c "cd work ; pip install -e ."
      -
        name: Run test suite
        run: docker exec frontend bash -l -c "cd work/tests ; pytest --assert=plain --config=ci.yaml"
      -
        name: Debug session
        if: ${{ failure() }}
        uses: mxschmitt/action-tmate@v3
        timeout-minutes: 60
        with:
          limit-access-to-actor: true
      -
        name: Shut down Slurm cluster containers
        run: |
          cd docker
          export DOCKER_CLIENT_TIMEOUT=600
          export COMPOSE_HTTP_TIMEOUT=600
          docker compose -f docker-compose.yml down
      -
        name: Push frontend
        uses: docker/build-push-action@v4
        with:
          context: ./docker
          file: ./docker/frontend/Dockerfile
          push: true
          tags: ghcr.io/noaa-gsl/exascaleworkflowsandbox/frontend:latest
          cache-from: type=registry,ref=ghcr.io/noaa-gsl/exascaleworkflowsandbox/frontend:cache
          cache-to: type=registry,ref=ghcr.io/noaa-gsl/exascaleworkflowsandbox/frontend:cache,mode=max
      -
        name: Push master
        uses: docker/build-push-action@v4
        with:
          context: ./docker
          file: ./docker/master/Dockerfile
          push: true
          tags: ghcr.io/noaa-gsl/exascaleworkflowsandbox/master:latest
          cache-from: type=registry,ref=ghcr.io/noaa-gsl/exascaleworkflowsandbox/master:cache
          cache-to: type=registry,ref=ghcr.io/noaa-gsl/exascaleworkflowsandbox/master:cache,mode=max
      -
        name: Push node
        uses: docker/build-push-action@v4
        with:
          context: ./docker
          file: ./docker/node/Dockerfile
          push: true
          tags: ghcr.io/noaa-gsl/exascaleworkflowsandbox/node:latest
          cache-from: type=registry,ref=ghcr.io/noaa-gsl/exascaleworkflowsandbox/node:cache
          cache-to: type=registry,ref=ghcr.io/noaa-gsl/exascaleworkflowsandbox/node:cache,mode=max
