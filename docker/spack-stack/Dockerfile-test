FROM ubuntu:20.04 as bootstrap

ENV SPACK_ROOT=/opt/spack \
    CURRENTLY_BUILDING_DOCKER_IMAGE=1 \
    container=docker

ENV DEBIAN_FRONTEND=noninteractive   \
    LANGUAGE=en_US.UTF-8 \
    LANG=en_US.UTF-8 \
    LC_ALL=en_US.UTF-8

RUN apt-get -yqq update \
 && apt-get -yqq upgrade \
 && apt-get -yqq install --no-install-recommends \
        build-essential \
        ca-certificates \
        curl \
        file \
        g++ \
        gcc \
        gfortran \
        git \
        gnupg2 \
        iproute2 \
        locales \
        make \
        mercurial \
        subversion \
        python3 \
        python3-pip \
        python3-setuptools \
        unzip \
        zstd \
 && locale-gen en_US.UTF-8 \
 && pip3 install boto3 \
 && rm -rf /var/lib/apt/lists/*

RUN mkdir $SPACK_ROOT && cd $SPACK_ROOT && \
    git init --quiet && git remote add origin https://github.com/jcsda/spack && git fetch --depth=1 origin 595a31bd0bb05a7e2017facc41552722919a8aaa && git checkout --detach FETCH_HEAD && \
    curl -L https://raw.githubusercontent.com/spack/spack/develop/var/spack/repos/builtin/packages/flux-core/package.py -o $SPACK_ROOT/var/spack/repos/builtin/packages/flux-core/package.py && \
    curl -L https://raw.githubusercontent.com/spack/spack/develop/var/spack/repos/builtin/packages/flux-sched/package.py -o $SPACK_ROOT/var/spack/repos/builtin/packages/flux-sched/package.py && \
    mkdir -p $SPACK_ROOT/opt/spack

RUN ln -s $SPACK_ROOT/share/spack/docker/entrypoint.bash \
          /usr/local/bin/docker-shell \
 && ln -s $SPACK_ROOT/share/spack/docker/entrypoint.bash \
          /usr/local/bin/interactive-shell \
 && ln -s $SPACK_ROOT/share/spack/docker/entrypoint.bash \
          /usr/local/bin/spack-env

RUN mkdir -p /root/.spack \
 && cp $SPACK_ROOT/share/spack/docker/modules.yaml \
        /root/.spack/modules.yaml \
 && rm -rf /root/*.* /run/nologin

# [WORKAROUND]
# https://superuser.com/questions/1241548/
#     xubuntu-16-04-ttyname-failed-inappropriate-ioctl-for-device#1253889
RUN [ -f ~/.profile ]                                               \
 && sed -i 's/mesg n/( tty -s \\&\\& mesg n || true )/g' ~/.profile \
 || true


WORKDIR /root
SHELL ["docker-shell"]

# Creates the package cache
RUN spack bootstrap now \
    && spack bootstrap status --optional \
    && spack spec hdf5+mpi

ENTRYPOINT ["/bin/bash", "/opt/spack/share/spack/docker/entrypoint.bash"]
CMD ["interactive-shell"]

# Build stage with Spack pre-installed and ready to be used
FROM bootstrap as builder

# Install OS packages needed to build the software
RUN apt-get -yqq update && apt-get -yqq upgrade \
 && apt-get -yqq install bc cpp g++ gcc gfortran git git-lfs make mysql-server qt5-default libqt5svg5-dev qt5dxcb-plugin wget \
 && rm -rf /var/lib/apt/lists/*


# What we want to install and how we want to install it
# is specified in a manifest file (spack.yaml)
RUN mkdir /opt/spack-environment \
&&  (echo spack: \
&&   echo '  concretizer:' \
&&   echo '    unify: true' \
&&   echo '' \
&&   echo '  config:' \
&&   echo '    checksum: false' \
&&   echo '    build_jobs: 8' \
&&   echo '    connect_timeout: 60' \
&&   echo '' \
&&   echo '    install_tree: /opt/software' \
&&   echo '  compilers:' \
&&   echo '  - compiler:' \
&&   echo '      spec: gcc@9.4.0' \
&&   echo '      paths:' \
&&   echo '        cc: /usr/bin/gcc' \
&&   echo '        cxx: /usr/bin/g++' \
&&   echo '        f77: /usr/bin/gfortran' \
&&   echo '        fc: /usr/bin/gfortran' \
&&   echo '      flags: {}' \
&&   echo '      operating_system: ubuntu20.04' \
&&   echo '      modules: []' \
&&   echo '      environment: {}' \
&&   echo '      extra_rpaths: []' \
&&   echo '' \
&&   echo '  # Basic package config from configs/common/packages.yaml' \
&&   echo '  # Additional package config for container' \
&&   echo '  packages:' \
&&   echo '    all:' \
&&   echo '      providers:' \
&&   echo '        blas: [openblas]' \
&&   echo '        fftw-api: [fftw]' \
&&   echo '        gl: [opengl]' \
&&   echo '        glu: [openglu]' \
&&   echo '        jpeg: [libjpeg-turbo]' \
&&   echo '        lapack: [openblas]' \
&&   echo '        yacc: [bison]' \
&&   echo '        zlib-api: [zlib]' \
&&   echo '        mpi: [openmpi@4.1.5]' \
&&   echo '      require: '"'"'%gcc'"'"'' \
&&   echo '      target: [x86_64]' \
&&   echo '      compiler: [gcc@9.4.0]' \
&&   echo '    flux-core:' \
&&   echo '      version: [0.58.0]' \
&&   echo '    flux-sched:' \
&&   echo '      version: [0.32.0]' \
&&   echo '' \
&&   echo '  specs:' \
&&   echo '  - flux-core@0.58.0' \
&&   echo '  - flux-sched@0.32.0' \
&&   echo '' \
&&   echo '  view: /opt/views/view') > /opt/spack-environment/spack.yaml

# Install the software, remove unnecessary deps
RUN --mount=type=secret,id=mirrors,target=/opt/spack/etc/spack/mirrors.yaml     --mount=type=secret,id=spack_stack_buildcache_key     --mount=type=secret,id=spack_stack_buildcache_secret_key <<EOF
  set -e
  cd /opt/spack-environment
  . $SPACK_ROOT/share/spack/setup-env.sh
  spack env activate .
  spack mirror add --s3-access-key-id "" --s3-access-key-secret "" s3_spack_stack_buildcache_ro s3://chiltepin/spack-stack/
  spack install --fail-fast --no-check-signature
  python -m pip install parsl[monitoring]==2023.12.4
  spack mirror list
  if [ "$(spack mirror list | wc -l)" = "3" ]; then
    export AWS_ACCESS_KEY_ID=$(cat /run/secrets/spack_stack_buildcache_key)
    export AWS_SECRET_ACCESS_KEY=$(cat /run/secrets/spack_stack_buildcache_secret_key)
    spack buildcache push --unsigned --update-index s3_spack_stack_buildcache_rw
  fi
  spack gc -y
EOF

# Modifications to the environment that are necessary to run
RUN cd /opt/spack-environment && \
    spack env activate --sh -d . > activate.sh

# Put output of spack find into a file
RUN cd /opt/spack-environment && \
spack env activate -d . && \
spack find 2>&1 | tee /root/spack_find.out


# Bare OS image to run the installed executables
FROM ubuntu:20.04

COPY --from=builder /opt/spack-environment /opt/spack-environment
COPY --from=builder /opt/software /opt/software

# paths.view is a symlink, so copy the parent to avoid dereferencing and duplicating it
COPY --from=builder /opt/views /opt/views

RUN { \
      echo '#!/bin/sh' \
      && echo '.' /opt/spack-environment/activate.sh \
      && echo 'exec "$@"'; \
    } > /entrypoint.sh \
&& chmod a+x /entrypoint.sh \
&& ln -s /opt/views/view /opt/view


#Set environment variables for installing tzdata
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=Etc/UTC
ENV CC=gcc
ENV CXX=g++
ENV FC=gfortran


RUN apt-get -yqq update && apt-get -yqq upgrade \
 && apt-get -yqq install bc cpp g++ gcc gfortran git git-lfs make mysql-server qt5-default libqt5svg5-dev qt5dxcb-plugin wget build-essential ca-certificates curl file gnupg2 iproute2 locales python3 python3-pip python3-setuptools unzip vim \
 && rm -rf /var/lib/apt/lists/*

# Copy spack find output from builder
COPY --from=builder /root/spack_find.out /root/spack_find.out
# Make a non-root user:nonroot / group:nonroot for running MPI
RUN useradd -U -k /etc/skel -s /bin/bash -d /home/nonroot -m nonroot --uid 43891 && \
echo "ulimit -s unlimited" >> /home/nonroot/.bashrc && \
echo "ulimit -v unlimited" >> /home/nonroot/.bashrc && \
echo "export CC=gcc" >> /home/nonroot/.bashrc && \
echo "export CXX=g++" >> /home/nonroot/.bashrc && \
echo "export FC=gfortran" >> /home/nonroot/.bashrc && \
printf "[credential]\n    helper = cache --timeout=7200\n" >> /home/nonroot/.gitconfig && \
mkdir /home/nonroot/.openmpi && \
echo "rmaps_base_oversubscribe = 1" >> /home/nonroot/.openmpi/mca-params.conf && \
chown -R nonroot:nonroot /home/nonroot/.gitconfig /home/nonroot/.openmpi
# Replicate settings for root user
RUN echo "ulimit -s unlimited" >> /root/.bashrc && \
echo "ulimit -v unlimited" >> /root/.bashrc && \
echo "export CC=gcc" >> /root/.bashrc && \
echo "export CXX=g++" >> /root/.bashrc && \
echo "export FC=gfortran" >> /root/.bashrc && \
printf "[credential]\n    helper = cache --timeout=7200\n" >> /root/.gitconfig && \
mkdir /root/.openmpi && \
echo "rmaps_base_oversubscribe = 1" >> /root/.openmpi/mca-params.conf
# Also set necessary environment variables for openmpi
RUN echo "export OMPI_ALLOW_RUN_AS_ROOT=1" >> /root/.bashrc && \
echo "export OMPI_ALLOW_RUN_AS_ROOT_CONFIRM=1" >> /root/.bashrc && \
echo "export OMPI_MCA_rmaps_base_oversubscribe=1" >> /root/.bashrc

LABEL "app"="jedi-ci"
LABEL "mpi"="openmpi"
ENTRYPOINT [ "/entrypoint.sh" ]
CMD [ "/bin/bash" ]

